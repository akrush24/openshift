- hosts: OSEv3
  become: yes
  gather_facts: yes

  pre_tasks:
  - name: 'install python Ubuntu/Debian'
    raw: 'sudo apt-get -y install python'
    when: ansible_os_family == 'Debian' or ansible_os_family == 'Ubuntu'
  - name: 'install python RedHat'
    raw: 'sudo yum -y install python'
    when: ansible_os_family == 'RedHat'

  tasks:
  - block: # --! Block for RPM Based OS !--
    - name: install EPEL
      yum: name="epel-release" state=installed

    - name: install PKGs
      yum: name="{{ item }}" state=installed
      loop:
      - docker
      - chrony
      - bash-completion
      - zabbix40-agent
      - iperf3
      - sysstat
      - smartmontools
      - lshw
      - hwinfo
      - net-tools
      - telnet
      - fio
      - hdparm
      - ipmitool
      - wget
      - jnettop
      - htop
      - pv
      - hping3
      - httpd-tools
    when: ansible_os_family == "RedHat"

  - name: Make sure a service is running
    systemd:
      state: started
      name: "{{ item }}"
    with_items:
    - docker
    - chronyd
    - zabbix-agent
    - sysstat

  - name: enable service chronyd and ensure it is not masked
    systemd:
      name: "{{ item }}"
      enabled: yes
      masked: no
    with_items:
    - docker
    - chronyd
    - zabbix-agent
    - sysstat

  - name: Stop and disable firewalld.
    service:
      name: firewalld
      state: stopped
      enabled: False

  - name: Disable SELinux
    selinux:
      policy: targeted
      state: permissive
    notify: Reboot

  - name: Wait till my servers will come up online
    wait_for:
      port: "{{ (ansible_port|default(ansible_ssh_port))|default(22) }}"
      host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
      search_regex: OpenSSH
      delay: 10  # Do not check for at least 10 sec
    connection: local

  - name: Check the uptime post reboot
    shell: uptime
    register: UPTIME_POST_REBOOT

  - debug: msg={{UPTIME_POST_REBOOT.stdout}}

  - name: Copy docker registries.conf file
    copy:
      src: "files/registries.conf"
      dest: "/etc/containers/registries.conf"
      owner: root
      group: root
      backup: yes
      mode: '0644'
    notyfe: Restart Docker

  - name: Copy docker docker file
    copy:
      src: "files/docker"
      dest: "/etc/sysconfig/docker"
      owner: root
      group: root
      backup: yes
      mode: '0644'
    notyfe: Restart Docker

  handlers:
  - name: Restart Docker
    systemd: name=docker state=restarted

  - name: Reboot
    shell: reboot now
    async: 10
    delay: 20
    poll: 0

  - name: Wait till my servers will come up online
    wait_for:
      host: "{{ inventory_hostname }}"
      state: started
      delay: 10
      timeout: 40
    delegate: 127.0.0.1
 
